---
title: "Proposal"
format: html
editor: visual
---

## Overview

We are building a Shiny app that shows political affiliation over time in counties of North Carolina and filters by race, gender, population density, and age for the past 6 elecctions. 

## Goal and Motivation

We aim to observe changes in political affiliation of the counties of North Carolina for the last six elections. We chose North Carolina because it is a swing state so we feel there will be more change in political affiliation and we also vote in North Carolina, so we are interested in understanding the breakdown of voter history here. By examining census data over time, while filtering for race, gender, population density, and age, we hope to rationalize the political changes over time. We are also curious about how major events such as the 2008 recession, COVID-19, and more have impacted political affiliation. Are those in specific categories of race, gender, population density, and age more susceptible to political changes? How has the political affiliation in specific counties or locations in Durham changed over time and is it across all identities or more specific? These are some of the questions we hope to answer when building our Shiny app.

Our goal is to create two maps of North Carolina split by counties, side-by-side. Both maps will look at each counties political affiliation by coloring each county by the total votes for each party in the selected election year (on a red and blue scale). Each map with have a year option in order to show two different election years side by side, in order to compare changes over time. Both maps will include a feature to filter the counties shown by different voter stats such as race percentage, population, sex percentage, and age percentage. For example you could look at the county with the highest female population and see how their county voted in a specific election. Additionally, users will be able to filter for counties based on the population metric, race, or age (for example, counties with population sizes greater that 200,000) and will be able to specifically view the political affiliations of the counties that meet the threshold.

We plan to use the Shiny interface to create both maps by adding a dropdown function for the filters, a shiny button to generate the map, and utilize behind the scenes functions such as helper, server, and output functions to display the counties that the user has filtered for.

## Data sets

We plan to use 12 data sets. 6 of our datasets are presidential election results in the election years from 2000 until 2020. The other 6 data sets are county demographic data from the six years of presidential elections from 2000 until 2020. The first set data set comes from the North Carolina State Board of Elections and shows the total votes for each county based on the type of election, choice party, absentee by mail and many other factors. We are only interested in the total votes per county for each choice party so we decided to roll up the data to show `County`, `Choice_Party`, and `Total_Votes`. The second set of data sets come from the NC Office of State Budget and Management. These data sets include data on demographic factors by county such as race, sex, and age. We will also calculate the population of each county by rolling up the data set and grouping by county.

Data sources:

<https://www.ncsbe.gov/results-data/election-results/historical-election-results-data#by-precinct>

<https://www.osbm.nc.gov/facts-figures/population-demographics>

We included the code that will we use to roll up each election data set for the year 2020 below, so you could see an example of how our election data will display.

```{r}
library(tidyverse)
library(readr)

file_path <- "data/2020.txt"
Election2020 <- read_tsv(file_path)

Election2020 <- Election2020 |>
  rename(Total_Votes = `Total Votes`, Choice_Party = `Choice Party`)

Election2020_Summary <- Election2020 |>
  filter(Choice_Party %in% c("DEM", "REP")) |>
  group_by(County, Choice_Party) |>
  summarize(Total_Votes = sum(Total_Votes, na.rm = TRUE), .groups = 'drop') |>
  arrange(County, Choice_Party)
```

## Weekly Plan of Attack

**Week 1:**

Malika: Work on motivation and methods

Sam: Work on finding data sources 

Ezra: Work on repo organization

Jordan: Work on procedure + utilizing data sources 

**Week 2:**

Jordan: Set up basic structure of Shiny app because she has the most experience with it

(Malika, Ezra, Sam): Become familiar with Shiny and Plotly to create filters and interactive features 

All: Work on data pre-processing and exploratory data analysis.

**Week 3:**

Jordan: Create filter functions for county data

Malika: Create shape files for North Carolina / aesthetic elements

Ezra + Sam: Clean Data Files for Elections 

**Week 4:**

All: Implement data into shiny app, confirm interactive element works

We may to split the data into sections for everyone to implement into shiny 

**Week 5:**

Jordan: Ensure side-by-side feature is effective for registered and actual votes, work on Conclusion in project write-up

Malika: Create appropriate red to blue scale, and ensure this is aesthetically clean for all filters, work on Introduction and Methods in project-write up

Sam: Implement any user fixes, work on project write-up to explain challenges and limitations, 

Ezra: Work on project final touches and work on presentation draft to clean up all write-up and create a uniform format 

**Week 6:**

Malika: Work on individual slide(s) and practice presentation

Jordan: Work on individual slide(s) and practice presentation

Ezra: Work on individual slide(s) and practice presentation

Sam: Work on individual slide(s) and practice presentation

All: Look through rubric and make edits where needed

## Organization

We plan to have a data folder in our project repo that stores the dataset files we'll be using. Additionally, we will have a folder of .R files that stores code for helper functions that we'll call into our .qmd file that we'll use for our write-up. We expect to have helper functions that build interactive maps and filter the data. Lastly, we will have a .R file that actually runs our shiny app.
